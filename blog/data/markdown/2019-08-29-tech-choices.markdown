---
layout: post
title: Peter的技术选项思路
date: 2019-08-29 08:13
comments: true
categories: 
---

现有每天早上强制自己写一点东西。 

本来今天早上要写 Redshift 相关的技术，但是自己转念一想，为什么不写写自己技术选项上的思路，让更多的人可以了解背后的原理。


对于技术造型我有几个原则:

> 1. 技术要简单(简练)
> 2. 技术要成熟
> 3. 技术要有生态

### 简单(简练)：

* 简练的技术才能组合出复杂的事物
* 简单的技术才能易维护
* 简单的技术才能少出 BUG
* 简单的技术新人才能更容易入门，也更容易搭建Team

比如C语言就比C++简练很多，也简单很多，重要系统用C写就比C++多。

### 成熟:

* 成熟不是指这个技术出来很久（和年份不强相关）
* 而是指这个技术的设计者已经深思熟虑，在前人的经验上设计出成熟的产品。

比如Git就是Linus在BitKeeper的基础上想了很久，设计出的产品。

### 生态

* 这项技术是否有足够技术资料
* 上下游是否配套的服务
* 这技术有无大量的技术爱好者
* 这项技术是否有最佳实践

比如Ruby On Rails, 比如 Redshift 等。

